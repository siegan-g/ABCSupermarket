using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
//imports needed for EF, Models and DBContext
using Microsoft.EntityFrameworkCore;
using Cloud6212Task2.DAL;
using Cloud6212Task2.Models;
//imports needed for IFormFile
using Microsoft.AspNetCore.Http;
using System.IO;
//imports needed for Blob Storage
using Azure.Storage.Blobs;


namespace Cloud6212Task2.Controllers
{
    /// <summary>
    ///  Majority of the code is autogenerated through the scaffolding option 
    ///  ##How to Reproduce:
    ///  * Right click on controller folder 
    ///  * New> New Scaffolding Item 
    ///  * Choose the option that adds a new controller with views using Entity Framework 
    ///  * Choose the respective model and DBContext cs classes
    ///  
    /// 
    /// </summary>
    public class ItemsController : Controller
    {
        private readonly SupermarketContext _context;

        public ItemsController(SupermarketContext context)
        {
            _context = context;
        }

        // GET: Items
        public async Task<IActionResult> Index()
        {
            return View(await _context.Items.ToListAsync());
        }

        // GET: Items/Details/5
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }
            //Tutorial suggests the AsNoTracking() method improves performance when the
            //entity will not be updated in the current db context instance
            var item = await _context.Items
                .AsNoTracking() 
                .FirstOrDefaultAsync(m => m.Id == id);
            if (item == null)
            {
                return NotFound();
            }

            return View(item);
        }

        // GET: Items/Create
        public IActionResult Create()
        {
            return View();
        }

        // Retrieved from the Azure Portal. 
        private readonly string connectionString = "DefaultEndpointsProtocol=https;AccountName=20116858;AccountKey=1Fv/N1jVDqM5Lc3YEwTPJq/PFhngFsR74AWeZC/MLzNhoJ4g6Q9ti4f6AdZCvmNv6BORWlaIz0tA/2EOG2Ds3g==;EndpointSuffix=core.windows.net";
        //hardcoded but neccessary 
        private readonly string containerName = "abcsupermarketimages";

        // POST: Items/Create
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.


        /**
         * Alterations from Scaffolding 
         * -> Removed Id Binding - its set to an identity of (1,1) automatically 
         * -> added try catch block if connection to db drops handling 
         * -> Added an iformfile to upload images
         */
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("Name,Price,Quantity,ImageUrl,FileName")] Item item, IFormFile file)
        {
            try
            {
                if (ModelState.IsValid)
                {
                    BlobClient blobClient = null;

                    if (file != null)
                    {
                        //These objects are  hierachical
                        //1. BlobServiceClient - Creates an instance of the Storage Account based on the connection string provided
                        //2. BlobContainerClient - Creates an instance of the Blob Container where the containerName is found 
                        //3. BlobClient - Provides a series of methods to manipulate the blob storage container based on the Container instance 
                        BlobServiceClient blobServiceClient = new BlobServiceClient(connectionString);
                        var containers = blobServiceClient.GetBlobContainers();
                        BlobContainerClient containerClient = new BlobContainerClient(connectionString, containerName);
                        await containerClient.CreateIfNotExistsAsync();
                        blobClient = containerClient.GetBlobClient(file.FileName);

                        await blobClient.UploadAsync(file.OpenReadStream(), true);
                        item.ImageUrl = blobClient.Uri.AbsoluteUri;
                        item.FileName = file.FileName;
                    }
   

                    _context.Add(item);
                    await _context.SaveChangesAsync();
                    return RedirectToAction(nameof(Index));
                }
            }

            //NOTE** Best practice to:
            //1. Catch a specific exception 
            //2. NOT specificy the exception in the front end which would otherwise give attackers and advantage
            //If you want to log the error create a variable of the exception 

            catch (DbUpdateException)
            {
                ModelState.AddModelError("", "Unable to save changes. " +
                "Try again, and if the problem persists " +
                "see your system administrator.");
            }
            return View(item);
        }

        // GET: Items/Edit/5
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var item = await _context.Items.FindAsync(id);
            if (item == null)
            {
                return NotFound();
            }
            return View(item);
        }

        // POST: Items/Edit/5
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, [Bind("Id,Name,Price,Quantity,ImageUrl")] Item item, IFormFile file)
        {
            if (id != item.Id)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                try
                {
                    if (ModelState.IsValid)
                    {
                        BlobClient blobClient = null;

                        if (file.Length > 0)
                        {                            
                            BlobServiceClient blobServiceClient = new BlobServiceClient(connectionString);
                            var containers = blobServiceClient.GetBlobContainers();
                            BlobContainerClient containerClient = new BlobContainerClient(connectionString, containerName);
                            await containerClient.CreateIfNotExistsAsync();
                            blobClient = containerClient.GetBlobClient(file.FileName);
                            //Upload() and UploadAsync() should overwrite a file with the same name
                            await blobClient.UploadAsync(file.OpenReadStream(), true);
                        }

                        item.FileName = file.FileName;
                        item.ImageUrl = blobClient.Uri.AbsoluteUri;
                        _context.Update(item);
                        await _context.SaveChangesAsync();
                    }
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!ItemExists(item.Id))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                return RedirectToAction(nameof(Index));
            }
            return View(item);
        }

        // GET: Items/Delete/5
        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var item = await _context.Items
                .FirstOrDefaultAsync(m => m.Id == id);
            if (item == null)
            {
                return NotFound();
            }

            return View(item);
        }

        // POST: Items/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            var item = await _context.Items.FindAsync(id);
            BlobServiceClient blobServiceClient = new BlobServiceClient(connectionString);
            var containers = blobServiceClient.GetBlobContainers();
        
            BlobContainerClient containerClient = new BlobContainerClient(connectionString, containerName);
            await containerClient.DeleteBlobIfExistsAsync(item.FileName);          
              
            _context.Items.Remove(item);
            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(Index));
        }
        private bool ItemExists(int id)
        {
            return _context.Items.Any(e => e.Id == id);
        }
    }
}
